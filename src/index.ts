///<reference path="../typings/global.d.ts"/>
///<reference path="./config.ts"/>

/***
 *  Welcome to Support++ v3.
 */
//DEV:: tsc && sudo mv ./dist/support.js /opt/sinusbot/scripts/support-pp.js && docker restart 1607214b898a

interface PluginEntry {
  url: string;
  name: string;
  description: string;
  version: string;
  author: string;

  getUrl(): string;
  getName(): string;
  getDescription(): string;
  getVersion(): string;
  getAuthor(): string;

  unload(): Promise<boolean>;
}

registerPlugin(Config.getScriptConfig() as Manifest, function (
  sinusbot: any,
  config: any,
  info: any
) {
  const command = require("command");
  const engine = require("engine");
  const backend = require("backend");
  const helpers = require("helpers");
  //const crypto = require('crypto');
  const db = require("db");
  const net = require("net");
  var cloud: Cloud;

  class logtag {
    static DEBUG = "DEBUG";
    static ERROR = "ERROR";
    static SYSTEM = "SYSTEM";
    static INFO = "INFO";
    static SOCKET = "WSS";
  }
  class CloudLicense {
    static PRO = "PRO";
    static OS = "OPEN SOURCE";
    static INSIDER = "INSIDER";
  }
  class CloudStatus {
    static CONNECTED = "connected";
    static NOT_CONNECTED = "not connected";
    static OUTDATED = "outdated";
  }
  interface DiscordEmbedFiields {
    name: string;
    value: string;
  }

  interface command {
    command: string;
    data: string;
    checksum: string;
  }

  interface SystemInformation {
    name: string;
    version: string;
    license?: CloudLicense;
    connectionStatus?: CloudStatus;
    versionCommandjs?: string;
  }

  //CLOUD class
  class Cloud {
    conn: any;
    /***
     * Define a list of allowed Support++ Cloud websocket interfaces.
     * If the checksum changes, the version is not compitable with this version.
     * Or we revoke ist, because there is a secturity issues.
     * And can not be automatic updated. You need to update manually!
     *
     * Please don't change this version manuelly. Trust us this is a bad idea.
     * We don't change the MD5 Hashes for fun: D
     *
     * Here is a list of all versions: https://meta.support-pp.de/t/support-cloud-v3-x-version-interface/62
     */
    allowedVersions: string[] = [
      "9b09f6edbb5288db2bc3f17f86704408", //v3.x
      "638b1e92abd10e954549466735baa564", // v3.x#369
    ];

    // Always the same checksum - "Accept the terms of use and privacy policy? [y/n]"
    acceptTosRequest: string = "f876d1ef938a72238c8874cc09bc1977";

    acceptTos: boolean = false;

    isInit: boolean = false;

    sendMessage(msg) {
      this.log(msg, logtag.SOCKET);
      this.conn.write(msg);
    }

    isConnected(): boolean {
      return this.conn ? true : false;
    }

    connect(): boolean {
      this.conn = net.connect({
        host: "0.tcp.ngrok.io",
        port: 19080,
        protocol: "tcp",
      });
      return this.isConnected();
    }
    disconnect(): boolean {
      this.conn.close();
      this.conn = undefined;
      return !this.isConnected();
    }

    reconnect(): boolean {
      this.disconnect();
      this.connect();
      return this.isConnected();
    }

    log(args: any, lvl: logtag) {
      engine.log(`[${lvl}] CLOUD :: ${args}`);
    }

    getSystemInfo(): SystemInformation {
      return {
        version: info.version,
        name: info.name,
        versionCommandjs: command.getVersion(),
        connectionStatus: this.isConnected()
          ? CloudStatus.CONNECTED
          : CloudStatus.NOT_CONNECTED,
      };
    }
    printJSON(json: any, raw: any) {
      var embed: boolean = false;
      var channelID: any;
      if (engine.getBackend() == "discord") {
        channelID = raw.message.channelID();
        embed = true;
      }
      if (engine.getBackend() == "ts3") {
        switch (raw.mode) {
          case 1:
            channelID = raw.client;
            break;
          case 2:
            channelID = raw.channel;
            break;
          default:
            channelID = raw.client;
            break;
        }
      }
      var fields: DiscordEmbedFiields[] = [];
      Object.keys(json).forEach(function (key) {
        fields.push({
          name: key,
          value: json[key],
        });
      });

      if (embed) {
        backend.extended().createMessage(channelID, {
          embed: {
            footer: {
              text: `Auto generated by Support++ ${
                cloud.getSystemInfo().version
              }`,
            },
            color: 2305854,
            thumbnail: {
              url:
                "https://meta.support-pp.de/uploads/default/original/1X/c3d8807d8f6921324ddaab30637a2f86137cfbe1.png",
            },
            fields: fields,
          },
        });
      } else {
        let outputTS3: string = "\n";
        Object.keys(json).forEach(function (key) {
          outputTS3 += `[B]${key}:[/B] ${json[key]}\n`;
        });
        channelID.chat(outputTS3);
      }
    }
  }
  /**
   * Sorry Flyth, but we got used to it somehow :D
   * console class to use console.log()
   */
  class console {
    public static log(msg: any, lvl?: logtag) {
      var logLvl: logtag = lvl;
      if (lvl == undefined) logLvl = logtag.DEBUG;
      cloud.log(msg, logLvl);
    }
  }

  /**
   * Here start the magic!
   *
   * Welcome to Support++ Cloud v3
   *
   * @Lapotor @GamerboomTv @Elias @Nxtmaster @Jniklas2 @VerHext
   */

  cloud = new Cloud();
  // cloud.connect();

  //TESTAREA
  //We use the nice lib from Mulitvitamine "Command.js" License: MIT
  if (!command)
    console.log(
      "500 - https://meta.support-pp.de/t/500-command-js/56",
      logtag.ERROR
    );

  /**
   * Register commands
   *
   * Thanks and love to Multivitamin.
   */

  const cloudCMD = command
    .createCommandGroup("cloud")
    .help("manages the Support++ cloud");

  cloudCMD
    .addCommand("info")
    .help("Print the support++ system info")
    .manual("Get the systeminformation from Support++")
    .manual("e.g. version number, status and other important information.")
    .exec((client, args, reply, raw) => {
      cloud.printJSON(cloud.getSystemInfo(), raw);
    });

  const pluginCMD = command.createCommandGroup("plugin");
  pluginCMD
    .addCommand("list")
    .help("Print the support++ system info")
    .manual("Get the systeminformation from Support++")
    .manual("e.g. version number, status and other important information.")
    .exec((client, args, reply, raw) => {
      cloud.printJSON(cloud.getSystemInfo(), raw);
    });

  /**
   * Database managment use SQLITE3
   * We plane to integrate mysql
   */

  var dbc = db.connect({ driver: "sqlite3" }, function (err) {
    if (err) {
      console.log(err, logtag.ERROR);
    }
  });
  if (dbc)
    dbc.exec("INSERT INTO blah (foo, foo2) VALUES (?, ?)", "bar", "bar2");
  if (dbc)
    dbc.query("SELECT * FROM blah", function (err, res) {
      if (!err) {
        res.forEach(function (row) {
          engine.log(helpers.toString(row.foo));
        });
      }
    });

  engine.on("load", function () {
    // must always be loaded AFTER the 'load' event
    var script = require("exportscript.js");
    engine.log(script.get()); // logs 'I get exportet!'
    script.set("New Value");
    engine.log(script.get()); // logs 'New Value'
  });

  /*

    cloud.conn.on('connect', data => {
        engine.log("######################## > connect")
    });
    cloud.conn.on('error', data => {
        engine.log("######################## > error")
    });
    cloud.conn.on('end', data => {
        engine.log("######################## > end")
    });
    cloud.conn.on('close', data => {
        engine.log("######################## > close")
    });
    cloud.conn.on('ready', data => {
        engine.log("######################## > ready")
    });

console.log(JSON.stringify(cloud.conn))


    cloud.conn.on('data', data => {
 
        const msgMD5 = helpers.MD5Sum(data.toString())

        if (!cloud.acceptTos && !cloud.isInit){
            if (cloud.allowedVersions.includes(msgMD5)){
                cloud.isInit = true;
            }else{
                cloud.disconnect()
                cloud.log("> SUPPORT++ CLOUD INTERFACE OUTDATED! https://meta.support-pp.de/t/501-interface-outdated/63", logtag.ERROR)
            }
            return;
        }
        //Accept the terms of use and privacy policy. Without you can't use the Support++ Cloud Version 3.x
        if (!cloud.acceptTos && cloud.isInit && msgMD5 == cloud.acceptTosRequest){
            cloud.sendMessage("y"); //TODO
            cloud.acceptTos = true;
            cloud.sendMessage(JSON.stringify({
                "command": "stats"
            }));
            return;
        }

        console.log(`MESSAGE :: ${data.toString()}`, logtag.SOCKET)

        try{
            const cmd = JSON.parse(data.toString()) as command;
            switch(cmd.command){
                case "install": {
                    console.log("install plugins")
                }

            }
        }catch(e){
            console.log(e, logtag.ERROR)
        }
    }) 
    */
});
